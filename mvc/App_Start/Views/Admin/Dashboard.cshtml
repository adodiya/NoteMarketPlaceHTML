@using PagedList.Mvc;
@using PagedList;
@model IPagedList<NotesMarketPlace.Models.Note>



@{
    ViewBag.Title = "Dashboard";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";

    @Styles.Render("~/Content/css")
    @Styles.Render("~/Content/custom/responsive-tabs.min.css")
    <link href="~/Content/custom/dashboard-admin.css" rel="stylesheet" />

    @Styles.Render("~/Content/custom/responsive.css")
    @Scripts.Render("~/bundles/jquery")
}
<div id="dashboard-admin">
    <section id="dashboard">
        <div class="content-box-md">
            <div class="container">
                <h1>Dashboard</h1>
                <div class="dashboard-blocks text-center">
                    <div class="notes-in-review"><a @Url.Action("NotesUnderReview", "Admin")>@ViewBag.Submitted</a><p>Number of Notes in Review for Publish</p></div>
                    <div class="notes-downloads"><a @Url.Action("DownloadedNotes", "Admin")>@ViewBag.Downloaded</a><p>Number of New Notes Downloads</p><p>(Last 7 days)</p></div>
                    <div class="new-registrations"><a @Url.Action("Members", "Admin")>@ViewBag.Members</a><p>Number of New Registrations</p><p>(Last 7 days)</p></div>
                </div>
            </div>

        </div>
    </section>

    <section id="published-notes">
        <div class="content-box-md">
            <div class="container">
                <div class="row">
                    <div class="col-md-4"><h3>Published Notes</h3></div>
                    <div class="col-md-8">
                        <form class="sb">

                            <div class="form-group has-search">
                                <span class="fa fa-search form-control-feedback"></span>
                                <input class="form-control" type="text" placeholder="Search notes here.." aria-label="Search">
                            </div>

                            <div class="form-group">
                                <button type="submit" class="btn btn-outline-secondary">Search</button>
                            </div>

                            <div class="form-group">
                                <select class="form-control" onchange="submit()" id="month" name="month" style="text-overflow: ellipsis; padding-right: 35px;">
                                    <option value="">Select Month</option>
                                    @{ 
                                        for (int u = 0; u < 6; u++)
                                                    {
                                        <option value="@DateTime.Now.AddMonths(-u).ToString("MMMM yyyy")">@DateTime.Now.AddMonths(-u).ToString("MMMM yyyy")</option> 
                                        } 
                                     }
                                </select>
                            </div>
                        </form>
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table">

                        <tr>
                            <th scope="col">SR NO.</th>
                            <th scope="col">@Html.ActionLink("NOTE TITLE", "Dashboard", new { sortby = ViewBag.SortByTitle, searchstring = Request.QueryString["searchstring"], dropdownsearch = Request.QueryString["dropdownsearch"] })</th>
                            <th scope="col">@Html.ActionLink("CATEGORY", "Dashboard", new { sortby = ViewBag.SortByCategory, searchstring = Request.QueryString["searchstring"], dropdownsearch = Request.QueryString["dropdownsearch"] })</th>
                            <th scope="col">@Html.ActionLink("ATTACHMENT SIZE", "Dashboard", new { sortby = ViewBag.SortBySize, searchstring = Request.QueryString["searchstring"], dropdownsearch = Request.QueryString["dropdownsearch"] })</th>

                            <th scope="col">@Html.ActionLink("STATUS", "Dashboard", new { sortby = ViewBag.SortByStatus, searchstring = Request.QueryString["searchstring"], dropdownsearch = Request.QueryString["dropdownsearch"] })</th>
                            <th scope="col">@Html.ActionLink("PRICE", "Dashboard", new { sortby = ViewBag.SortByPrice, searchstring = Request.QueryString["searchstring"], dropdownsearch = Request.QueryString["dropdownsearch"] })</th>
                            <th scope="col">@Html.ActionLink("PUBLISHER", "Dashboard", new { sortby = ViewBag.SortBySeller, searchstring = Request.QueryString["searchstring"], dropdownsearch = Request.QueryString["dropdownsearch"] })</th>
                            <th scope="col">@Html.ActionLink("PUBLISHED DATE", "Dashboard", new { sortby = ViewBag.SortByDate, searchstring = Request.QueryString["searchstring"], dropdownsearch = Request.QueryString["dropdownsearch"] })</th>
                            <th scope="col">@Html.ActionLink("NUMBER OF\nDownloads", "Dashboard", new { sortby = ViewBag.SortByStatus, searchstring = Request.QueryString["searchstring"], dropdownsearch = Request.QueryString["dropdownsearch"] })</th>



                            <th scope="col"></th>
                        </tr>
                        @{ int i = 1;}
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>{@i;}{@i++;}</td>


                                <td><a @Url.Action("NoteDetails","Dashboard",new { id=item.ID})>@item.Title</a></td>
                                <td>@item.Category.Name</td>
                                @{
                                    double count = 0;
                                    foreach (var size in item.NotesAttachments)
                                    {
                                        count = count + size.FileSize;

                                    }
                                    string[] sizes = { "B", "KB", "MB", "GB", "TB" };
                                    int order = 0;
                                    while (count >= 1024 && order < sizes.Length - 1)
                                    {
                                        order++;
                                        count = count / 1024;
                                    }

                                    string result = String.Format("{0:0.##} {1}", count, sizes[order]);

                                    <td>@result</td>
                                }
                                <td>@(item.IsPaid?"Paid":"Free")</td>
                                @if (item.Price == null)
                                {
                                    <td>$0</td>
                                }
                                else
                                {
                                    <td>$@item.Price</td>
                                }
                                <td>@item.User.FullName</td>
                                <td>@item.PublishedDate</td>
                                <td>@item.Downloads.Where(model => model.IsAttachmentDownloaded.Equals(true)).Count()</td>

                                <td>
                                    <span class="dropdown">
                                        <a href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            <i class="fa fa-ellipsis-v" aria-hidden="true"></i>
                                        </a>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">

                                            <a class="dropdown-item" @Url.Action("Download", "Admin", new { id = item.ID })>Download Notes</a>
                                            <a class="dropdown-item" @Url.Action("NoteDetails", "Admin", new { id = item.ID })>View Details</a>
                                            <a class="dropdown-item unpublish-btn" href="#" role="button" data-target="#unpublish" data-toggle="modal">Unpublish</a>
                                        </div>
                                        <div class="modal fade" id="unpublish" tabindex="-1" aria-labelledby="rejectModalLabel" aria-hidden="true">
                                            <div class="modal-dialog">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        @item.Title - @item.Category.Name
                                                    </div>
                                                    <div class="modal-body">
                                                        @using (Html.BeginForm("Unpublish", "Admin", new { id = item.ID }, FormMethod.Post))
                                                        {
                                                            <div class="form-group">
                                                                <p>Are you sure you want to Unpublish this note?</p>
                                                                @Html.TextArea("Remarks", htmlAttributes: new { @class = "form-control", placeholder = "Write remarks" })
                                                                <input type="submit" value="Unpublish" class="btn btn-danger" />

                                                                <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>

                                                            </div>
                                                        }

                                                    </div>



                                                </div>
                                            </div>
                                        </div>
                                    </span>
                                </td>
                            </tr>
                        }
                    </table>
                    @Html.PagedListPager(Model, page => Url.Action("NotesUnderReview", new { searchstring = Request.QueryString["searchstring"], dropdownsearch = Request.QueryString["dropdownsearch"], sortby = Request.QueryString["sortby"], page }),
                 new PagedListRenderOptions() { Display = PagedListDisplayMode.IfNeeded, DisplayPageCountAndCurrentLocation = false, ClassToApplyToFirstListItemInPager = null, ClassToApplyToLastListItemInPager = null })
                </div>
            </div>

        </div>

    </section>
</div>

<script src="~/Scripts/bootstrap.bundle.min.js"></script>
@Scripts.Render("~/bundles/bootstrap")
@Scripts.Render("~/bundles/custom")