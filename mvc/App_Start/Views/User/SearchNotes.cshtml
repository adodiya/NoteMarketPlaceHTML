@using PagedList.Mvc;
@using PagedList;
@model IPagedList<NotesMarketPlace.Models.Note>

@{
    ViewBag.Title = "SearchNotes";
    Layout = "~/Views/Shared/_UserLayout.cshtml";
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    @Styles.Render("~/Content/custom/responsive-tabs.min.css")

    @Styles.Render("~/Content/custom/search-page.css")
    @Styles.Render("~/Content/custom/responsive.css")
    <style type="text/css">
        #whitestar {
            color: #ccc;
        }

        i.fa.fa-star {
            color: gold;
        }
    </style>

}

<section id="search-book-page">

    <!-- Search Banner begins-->
    <section id="search-banner">
        <div class="content-box-sm">
            <h1 class="text-center">Search Notes</h1>
        </div>

    </section>
    <!-- Search Banner ends-->
    <!-- Search Filters-->
    <section id="search-filter">
        <div class="content-box-md">
            <div class="container">
                <h3>Search and Filter Notes</h3>
                @using (Html.BeginForm("SearchNotes", "Home", FormMethod.Get))
                {

                    <div class="search-input">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group has-search">
                                    <span class="fa fa-search form-control-feedback"></span>
                                    @Html.TextBox("searchstring", null, htmlAttributes: new { id = "Search", @class = "form-control search-input", placeholder = "Search notes here.." })
                                </div>
                            </div>



                            <div class="col-md-4 col-lg-2 col-sm-8">
                                <div class="form-group">
                                    @Html.DropDownList("searchType", ViewBag.searchType as SelectList, "Select type", new { @class = "form-control", onchange = "this.form.submit();" })

                                </div>
                            </div>

                            <div class="col-md-4 col-lg-2 col-sm-8">
                                <div class="form-group">
                                    @Html.DropDownList("searchCategory", ViewBag.searchCateogry as SelectList, "Select category", new { @class = "form-control drop", onchange = "this.form.submit();" })
                                </div>

                            </div>
                            <div class="col-md-4 col-lg-2 col-sm-8">
                                <div class="form-group">
                                    @Html.DropDownList("searchCountry", ViewBag.searchCountry as SelectList, "Select category", new { @class = "form-control drop", onchange = "this.form.submit();" })
                                </div>

                            </div>
                            <div class="col-md-4 col-lg-2 col-sm-8">
                                <div class="form-group">
                                    @Html.DropDownList("searchUniversity", ViewBag.searchUniversity as SelectList, "Select university", new { @class = "form-control drop", onchange = "this.form.submit();" })
                                </div>

                            </div>
                            <div class="col-md-4 col-lg-2 col-sm-8">
                                <div class="form-group">
                                    @Html.DropDownList("searchCourse", ViewBag.searchCourse as SelectList, "Select course", new { @class = "form-control drop", onchange = "this.form.submit()" })
                                </div>

                            </div>
                            <div class="col-md-4 col-lg-2 col-sm-8">
                                <div class="form-group">
                                    @Html.DropDownList("FooBarDropDown", new List<SelectListItem>{
    new SelectListItem{ Text="Option 1", Value = "1" },
    new SelectListItem{ Text="Option 2", Value = "2" },
    new SelectListItem{ Text="Option 3", Value = "3" },
 }, "Select", new { @class = "form-control drop", onchange = "this.form.submit()" })
                                </div>

                            </div>
                        </div>
                    </div>
                }
            </div>

        </div>
    </section>
    <!-- Search Filters ends-->

    <section id="book-list">
        <div class="content-box-md">
            <div class="container">
                <h3>Total @Model.Count() notes</h3>
                <div class="row row-cols-1 row-cols-md-3">
                    @foreach (var booklist in Model)
                    {@Html.HiddenFor(model => booklist.Category.Name)
                    <div class="col mb-4 Search content">


                        <div class="card h-100">
                            @if (booklist.DisplayPic == null)
                            {<img src="~/DisplayImage/Default.jpg" class="card-img-top" alt="ProfilePicture"> }
                            else
                            { <img src="@Url.Content(booklist.DisplayPic)" class="card-img-top" alt="ProfilePicture">}

                            <div class="card-body">
                                <h5 class="card-title" h-100>@Html.ActionLink(@booklist.Title, "NoteDetails", new { id = booklist.ID }, htmlAttributes: new { @class = "book-title" })</h5>
                                <div class="card-text">
                                    <ul class="book-details">
                                        <li><i class="fa fa-university"></i><span>@booklist.UniversityName, @booklist.Country.Name </span></li>
                                        <li><i class="fa fa-book"></i><span>@booklist.NoOfPages Pages</span></li>
                                        <li><i class="fa fa-calendar"></i><span>@booklist.PublishedDate</span></li>
                                        <li><i class="fa fa-flag"></i><span>@booklist.ReportedIssues.Count() Users marked this note as inappropriate</span></li>

                                        @{ if (@booklist.NotesReviews.Count() != 0)
                                            {
                                                int count = (int)Math.Round(booklist.NotesReviews.Select(model => model.Ratings).Average());
                                                int count2 = 5 - count;
                                                <li class="rate">
                                                    @for (int i = 0; i < count; i++)
                                                    {
                                                        <span><i class="fa fa-star" aria-hidden="true"></i></span>
                                                    }
                                                    @for (int j = 0; j < count2; j++)
                                                    {
                                                        <span><i class="fa fa-star" aria-hidden="true" id="whitestar"></i></span>
                                                    }

                                                </li>
                                            }
                                            else
                                            {
                                                <li class="rate">
                                                    @for (int j = 0; j < 5; j++)
                                                    {
                                                        <span><i class="fa fa-star" aria-hidden="true" id="whitestar"></i></span>
                                                    }
                                                </li>
                                            }

                                        }



                                        <span class="rate-span">@booklist.NotesReviews.Count()</span>Reviews
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                }


                </div>

                @Html.PagedListPager(Model, page => Url.Action("SearchNotes", new { searchstring = Request.QueryString["searchstring"], searchCategory = Request.QueryString["searchCategory"], searchType = Request.QueryString["searchType"], searchRating = Request.QueryString["searchRating"], searchUniversity = Request.QueryString["searchUniversity"], searchCourse = Request.QueryString["searchCourse"], searchCountry = Request.QueryString["searchCountry"], page }),
             new PagedListRenderOptions() { Display = PagedListDisplayMode.IfNeeded, DisplayPageCountAndCurrentLocation = false, ClassToApplyToFirstListItemInPager = null, ClassToApplyToLastListItemInPager = null })
            </div>
        </div>


    </section>


</section>
<script src="~/Scripts/jquery-3.5.1.min.js"></script>
<script src="~/Scripts/bootstrap.min.js"></script>
<script>
    $(document).ready(function () {
        function Contains(text_one, text_two) {
            if (text_one.indexOf(text_two) != -1)
                return true;
        }
        $("#Search").keyup(function () {
            var searhText = $("#Search").val().toLowerCase();

            $(".Search").each(function () {
                if (!Contains($(this).text().toLowerCase(), searhText)) {
                    $(this).hide();
                }
                else {
                    $(this).show();
                }
            })


        })

        $('.selectpicker').selectpicker({
            liveSearch: true,
            showSubtext: true
        });


    });


</script>
